import React, { useEffect, useState } from "react";
import { View, Text, TextInput, Button, FlatList, StyleSheet, Alert } from "react-native";
import axios from "axios";

export default function App() {
  const [nome, setNome] = useState("");
  const [mensagem, setMensagem] = useState("");
  const [mensagens, setMensagens] = useState([]);

  // ⚠️ Coloque aqui o link do seu backend Render
  const API = "https://chat-backend-rfl9.onrender.com";

  const buscarMensagens = async () => {
    try {
      const res = await axios.get(`${API}/mensagens`);
      console.log("Dados recebidos:", res.data);

      // Garante que o formato seja uma lista
      let lista = res.data;
      if (!Array.isArray(lista)) {
        if (lista.rows) lista = lista.rows;
        else if (lista.mensagens) lista = lista.mensagens;
        else lista = Object.values(lista);
      }

      // Padroniza os dados
      const formatado = lista.map((item, idx) => ({
        id: item.id ?? idx,
        nome: item.nome ?? item.name ?? "Anônimo",
        mensagem: item.mensagem ?? item.texto ?? item.message ?? "",
      }));

      setMensagens(formatado);
    } catch (error) {
      console.error("Erro ao buscar mensagens:", error);
      Alert.alert("Erro", "Falha ao buscar mensagens do servidor.");
    }
  };

  const enviarMensagem = async () => {
    if (!nome.trim() || !mensagem.trim()) {
      Alert.alert("Aviso", "Preencha nome e mensagem!");
      return;
    }

    try {
      await axios.post(`${API}/mensagens`, { nome, mensagem });
      setMensagem("");
      buscarMensagens();
    } catch (error) {
      console.error("Erro ao enviar:", error);
      Alert.alert("Erro", "Não foi possível enviar a mensagem.");
    }
  };

  useEffect(() => {
    buscarMensagens();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.titulo}>💬 Chat Online</Text>

      <TextInput
        style={styles.input}
        placeholder="Seu nome"
        value={nome}
        onChangeText={setNome}
      />
      <TextInput
        style={[styles.input, { height: 80 }]}
        placeholder="Digite sua mensagem..."
        value={mensagem}
        onChangeText={setMensagem}
        multiline
      />

      <Button title="Enviar" onPress={enviarMensagem} />

      <FlatList
        data={mensagens}
        keyExtractor={(item, idx) => String(item.id ?? idx)}
        renderItem={({ item }) => (
          <View style={styles.mensagem}>
            <Text>
              <Text style={{ fontWeight: "bold" }}>{item.nome}:</Text> {item.mensagem}
            </Text>
          </View>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#f2f2f2", padding: 20, paddingTop: 50 },
  titulo: { fontSize: 22, fontWeight: "bold", textAlign: "center", marginBottom: 10 },
  input: { backgroundColor: "#fff", padding: 10, marginVertical: 5, borderRadius: 8, borderWidth: 1, borderColor: "#ccc" },
  mensagem: { backgroundColor: "#fff", padding: 10, marginVertical: 5, borderRadius: 8 },
});
